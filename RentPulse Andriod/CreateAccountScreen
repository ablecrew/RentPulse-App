package com.rentpulse

import android.widget.Toast
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Visibility
import androidx.compose.material.icons.filled.VisibilityOff
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.rentpulse.ui.theme.Montserrat
import com.rentpulse.navigation.Screens
import com.rentpulse.data.models.ApiResponse
import com.rentpulse.data.models.RegisterRequest
import com.rentpulse.util.RSAEncryptionHelper
import kotlinx.coroutines.launch

@Composable
fun CreateAccountScreen(navController: NavController) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()

    var fullName by remember { mutableStateOf("") }
    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var confirmPassword by remember { mutableStateOf("") }
    var passwordVisible by remember { mutableStateOf(false) }
    var confirmPasswordVisible by remember { mutableStateOf(false) }
    var isLoading by remember { mutableStateOf(false) }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                Brush.verticalGradient(
                    colorStops = arrayOf(
                        0.0f to Color(0xFF007BFF),
                        0.5f to Color(0xFF007BFF),
                        0.55f to Color(0xFFBFDFFF),
                        1.0f to Color(0xFFF5F5F5)
                    )
                )
            )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .align(Alignment.TopCenter)
                .padding(top = 10.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Image(
                painter = painterResource(id = R.drawable.icon_1),
                contentDescription = "App Logo",
                modifier = Modifier.height(130.dp)
            )

            Spacer(modifier = Modifier.height(8.dp))

            Text(
                text = "Create Your Account",
                fontFamily = Montserrat,
                fontWeight = FontWeight.Bold,
                fontSize = 24.sp,
                color = Color.White
            )

            Spacer(modifier = Modifier.height(4.dp))

            Text(
                text = "Welcome to RentPulse",
                fontFamily = Montserrat,
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                color = Color.White
            )
            Text(
                text = "Your Gateway to Smart property living",
                fontFamily = Montserrat,
                fontSize = 14.sp,
                color = Color.White
            )
        }

        Card(
            shape = RoundedCornerShape(20.dp),
            colors = CardDefaults.cardColors(containerColor = Color.White),
            modifier = Modifier
                .fillMaxWidth()
                .align(Alignment.BottomCenter)
                .padding(16.dp),
            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
        ) {
            Column(
                modifier = Modifier
                    .background(Color.White)
                    .padding(20.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                OutlinedTextField(
                    value = fullName,
                    onValueChange = { fullName = it },
                    label = { Text("Full Name", fontFamily = Montserrat, color = Color.Black) },
                    modifier = Modifier.fillMaxWidth(),
                    textStyle = TextStyle(fontFamily = Montserrat, color = Color.Black),
                    shape = RoundedCornerShape(12.dp)
                )

                Spacer(modifier = Modifier.height(12.dp))

                OutlinedTextField(
                    value = email,
                    onValueChange = { email = it },
                    label = { Text("Email address", fontFamily = Montserrat, color = Color.Black) },
                    modifier = Modifier.fillMaxWidth(),
                    textStyle = TextStyle(fontFamily = Montserrat, color = Color.Black),
                    shape = RoundedCornerShape(12.dp)
                )

                Spacer(modifier = Modifier.height(12.dp))

                OutlinedTextField(
                    value = password,
                    onValueChange = { password = it },
                    label = { Text("Password", fontFamily = Montserrat, color = Color.Black) },
                    visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
                    trailingIcon = {
                        IconButton(onClick = { passwordVisible = !passwordVisible }) {
                            Icon(
                                imageVector = if (passwordVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,
                                contentDescription = null
                            )
                        }
                    },
                    modifier = Modifier.fillMaxWidth(),
                    textStyle = TextStyle(fontFamily = Montserrat, color = Color.Black),
                    shape = RoundedCornerShape(12.dp)
                )

                Spacer(modifier = Modifier.height(12.dp))

                OutlinedTextField(
                    value = confirmPassword,
                    onValueChange = { confirmPassword = it },
                    label = { Text("Confirm Password", fontFamily = Montserrat, color = Color.Black) },
                    visualTransformation = if (confirmPasswordVisible) VisualTransformation.None else PasswordVisualTransformation(),
                    trailingIcon = {
                        IconButton(onClick = { confirmPasswordVisible = !confirmPasswordVisible }) {
                            Icon(
                                imageVector = if (confirmPasswordVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,
                                contentDescription = null
                            )
                        }
                    },
                    modifier = Modifier.fillMaxWidth(),
                    textStyle = TextStyle(fontFamily = Montserrat, color = Color.Black),
                    shape = RoundedCornerShape(12.dp)
                )

                Spacer(modifier = Modifier.height(16.dp))

                Button(
                    onClick = {
                        if (password != confirmPassword) {
                            Toast.makeText(context, "Passwords do not match", Toast.LENGTH_SHORT).show()
                        } else {
                            RSAEncryptionHelper.fetchPublicKey { publicKey ->
                                if (publicKey != null) {
                                    val encryptedPassword =
                                        RSAEncryptionHelper.encryptWithPublicKey(password, publicKey)

                                    if (encryptedPassword == null) {
                                        Toast.makeText(context, "Encryption failed", Toast.LENGTH_SHORT).show()
                                        return@fetchPublicKey
                                    }

                                    scope.launch {
                                        isLoading = true
                                        try {
                                            val request = RegisterRequest(
                                                username = fullName,
                                                email = email,
                                                password = encryptedPassword,
                                                role = "tenant"
                                            )

                                            // âœ… Updated: call register (not registerUser)
                                            val registerResponse =
                                                RetrofitClient.api.register(request)

                                            if (registerResponse.status == "success") {
                                                Toast.makeText(context, "Registered Successfully", Toast.LENGTH_SHORT).show()

                                                // ðŸ”¹ Send OTP
                                                val otpResponse: ApiResponse =
                                                    RetrofitClient.api.sendOtp(mapOf("email" to email))

                                                if (otpResponse.success) {
                                                    Toast.makeText(context, "OTP sent to your email", Toast.LENGTH_SHORT).show()
                                                    navController.navigate(Screens.AccountVerificationScreen.createRoute(email))
                                                } else {
                                                    Toast.makeText(context, otpResponse.message ?: "Failed to send OTP", Toast.LENGTH_SHORT).show()
                                                }
                                            } else {
                                                Toast.makeText(context, registerResponse.message ?: "Registration failed", Toast.LENGTH_SHORT).show()
                                            }
                                        } catch (e: Exception) {
                                            Toast.makeText(context, "Error: ${e.message}", Toast.LENGTH_SHORT).show()
                                        } finally {
                                            isLoading = false
                                        }
                                    }
                                } else {
                                    Toast.makeText(context, "Could not fetch public key", Toast.LENGTH_SHORT).show()
                                }
                            }
                        }
                    },
                    modifier = Modifier.fillMaxWidth(),
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF007BFF)),
                    shape = RoundedCornerShape(50.dp)
                ) {
                    if (isLoading) {
                        CircularProgressIndicator(
                            color = Color.White,
                            strokeWidth = 2.dp,
                            modifier = Modifier.size(20.dp)
                        )
                    } else {
                        Text("Create Account", fontFamily = Montserrat, color = Color.White)
                    }
                }

                Spacer(modifier = Modifier.height(16.dp))

                Text("OR Sign Up with", fontFamily = Montserrat, fontSize = 14.sp, color = Color.Black)

                Spacer(modifier = Modifier.height(12.dp))

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceEvenly
                ) {
                    IconButton(onClick = {
                        Toast.makeText(context, "Google Sign-In Clicked", Toast.LENGTH_SHORT).show()
                    }) {
                        Image(
                            painter = painterResource(id = R.drawable.google_logo),
                            contentDescription = "Google"
                        )
                    }
                    IconButton(onClick = {
                        Toast.makeText(context, "Apple Sign-In Clicked", Toast.LENGTH_SHORT).show()
                    }) {
                        Image(
                            painter = painterResource(id = R.drawable.apple_logo),
                            contentDescription = "Apple"
                        )
                    }
                    IconButton(onClick = {
                        Toast.makeText(context, "Microsoft Sign-In Clicked", Toast.LENGTH_SHORT).show()
                    }) {
                        Image(
                            painter = painterResource(id = R.drawable.microsoft_logo),
                            contentDescription = "Microsoft"
                        )
                    }
                }

                Spacer(modifier = Modifier.height(8.dp))

                Row {
                    Text("Already have an Account? ", fontFamily = Montserrat, color = Color.Black)
                    Text(
                        text = "Sign In",
                        color = Color(0xFF007BFF),
                        fontWeight = FontWeight.Bold,
                        fontFamily = Montserrat,
                        modifier = Modifier.clickable {
                            navController.navigate(Screens.SignInScreen.route)
                        }
                    )
                }
            }

            Spacer(modifier = Modifier.height(6.dp))

            Text(
                text = "By signing up, you agree to the Terms of Services and Privacy Policy",
                fontSize = 12.sp,
                fontFamily = Montserrat,
                color = Color.Black,
                textAlign = TextAlign.Center
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun CreateAccountScreenPreview() {
    val navController = rememberNavController()
    CreateAccountScreen(navController)
}
